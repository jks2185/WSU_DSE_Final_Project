# -*- coding: utf-8 -*-
"""Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZcEBcTfJvfE9BqgC_XaRdrYMWxPqU37x

# Install libraries
"""

!pip install plotly
!pip install dash

"""# Import Packages"""

import plotly.express as px
import pandas as pd
import numpy as np

"""# Create Dataframe



"""

pdf = pd.read_csv('https://storage.googleapis.com/eg3311/CustomerSentiment.csv')

print(pdf.columns)
print(type(pdf))

"""## Cleaning step - Change column names

Since the column names have spaces, it is a good idea to clean up the names

"""

new_names = [value.lower().replace(' ', '_') for value in pdf.columns]
pdf.columns = new_names

pdf

# check datatypes of all columns
print(pdf.dtypes)
pdf.columns

pdf.head(2)

pdf= pdf[["yyyy","caseid","id","ics", "icc","ice","pago", "pexp","bago","bexp","unemp","govt","ratex","px1q1","dur","hom","shom","car","income","homeown","homeval","age","region","sex","marry","educ","eclgrd","polaff"]]
pdf.head(2)

"""# Wrangling step - Change the datatype of date column to date.

"""

# change data type of date column to date

# Convert 'date_str' column to datetime
pdf['year'] = pd.to_datetime(pdf['yyyy'], format='%Y')
pdf['year'] = pdf['year'].dt.year

# Print the new DataFrame
print(pdf)

# find out what are the data type of each column
print(pdf.dtypes)

# Check a few values by selecting only the date column
date_result = pdf.groupby('year').count()
print(date_result)

"""# Statistics on income, homeamt, educ, egrade, and age columns"""

# Run statistics on several columns
result = pdf[["income",'educ','age',"dur"]].describe()
result.head()

pdf = pdf.replace(' ', '')

pdf = pdf.applymap(lambda x: x.strip() if isinstance(x, str) else x)

pdf['income'] = pdf['income'].replace('', 0)

pdf['income'] = pdf['income'].astype(int)

pdf['sex'] = pdf['sex'].astype(str)

pdf['sex'] = pdf['sex'].replace({'1':'Male', '2':'Female'})

pdf['region'] = pdf['region'].astype(str)

pdf = pdf.drop(index=pdf[(pdf['region'] == '6') | (pdf['region'] == '')].index)

pdf = pdf.drop(index=pdf[(pdf['sex'] == '')].index)

print(pdf.dtypes)

null_counts = [(c, pdf[c].isnull().sum()) for c in pdf.columns]

null_counts

pdf['sex'] = pdf['sex'].astype(str)

pdf_avg = pdf.groupby(["year","sex"]).mean().reset_index()

print(pdf_avg)

"""#Visualizations"""

pdf.columns

pdf_male_avg = pdf.loc[pdf['sex'] == 'Male'].groupby(["year","sex"]).mean().sort_values('year',ascending=False)

pdf_male_avg

pdf_female_avg = pdf.loc[pdf['sex'] == 'Female'].groupby(["year","sex"]).mean().sort_values('year',ascending=True)

pdf_female_avg.columns

import plotly.graph_objects as go
import plotly.offline as pyo


trace_male = go.Scatter(x=pdf_male_avg['yyyy'], y=pdf_male_avg['income'], mode='lines', name='Male')
trace_female = go.Scatter(x=pdf_female_avg['yyyy'], y=pdf_female_avg['income'], mode='lines', name='Female')

data = [trace_male, trace_female]

layout = go.Layout()

fig = go.Figure(data=data,layout=layout)

fig.update_layout(title='Average Income by Gender',
    xaxis=dict(
        title='Year',
        type='linear',
        autorange=True,
        tickmode='linear',
        tick0=0,
        dtick=10,
        ticklen=8,
        tickwidth=2,
        tickcolor='#000',
        showgrid=True,
        gridwidth=1,
        gridcolor='#ddd',
        tickvals=None,
        ticktext=None,
        categoryorder='category ascending'
    ),
    yaxis=dict(
        title='Income',
        type='linear',
        autorange=True,
        tickmode='linear',
        tick0=0,
        dtick=10000,
        ticklen=8,
        tickwidth=2,
        tickcolor='#000',
        showgrid=True,
        gridwidth=1,
        gridcolor='#ddd',
        tickvals=None,
        ticktext=None,
        categoryorder='category descending'
    )
)


fig.show()

counts = pdf.groupby(['sex','year']).count().reset_index()

figpie = px.pie(counts, names='sex', values='caseid')

figpie.update_layout(title='Gender Participants')

fig.show()

import plotly.graph_objects as go
import plotly.offline as pyo
pdf_avg_yr = pdf.groupby(["year"]).mean().reset_index()

trace4 = go.Scatter(x=pdf_avg_yr['year'], y=pdf_avg_yr['ice'], mode='lines', name='Avg. ICE', yaxis='y2')
trace3 = go.Scatter(x=pdf_avg_yr['year'], y=pdf_avg_yr['ics'], mode='lines', name='Avg. ICS', yaxis='y2')
trace2 = go.Scatter(x=pdf_avg_yr['year'], y=pdf_avg_yr['icc'], mode='lines', name='Avg. ICC', yaxis='y2')
trace1 = go.Bar(x=pdf_avg_yr['year'], y=pdf_avg_yr['income'], name='Avg. Income', yaxis='y')



# Define the layout
layout = go.Layout(title='Income and ICS Comparison',
                   xaxis=dict(title='Year'),
                   yaxis2=dict(title='Index', side='right',overlaying='y', range=[0, 125]),
                   yaxis=dict(title='Income', side='left', range=[0, 150000]))

data = [trace1, trace3, trace2, trace4]

# Create the figure
figincomeindex = go.Figure(data=data, layout=layout)

figincomeindex.show()

pyo.plot(figincomeindex)

pdf_avg_yr

trace1 = go.Scatter(x=pdf_avg_yr['year'], y=pdf_avg_yr['ics'], mode='lines', name='Avg. ICS')
trace2 = go.Scatter(x=pdf_avg_yr['year'], y=pdf_avg_yr['icc'], mode='lines', name='Avg. ICC')
trace3 = go.Scatter(x=pdf_avg_yr['year'], y=pdf_avg_yr['ice'], mode='lines', name='Avg. ICE')


# Define the layout
layout = go.Layout(title='Sentiment over Time',
                   xaxis=dict(title='Year'),
                   yaxis=dict(title='Index', side='left', range=[0, 175]))

data = [trace1, trace2, trace3]

# Create the figure
figindex = go.Figure(data=data, layout=layout)

figindex.show()

pyo.plot(figindex)

corr = pdf.corr()
corr.style.background_gradient(cmap='coolwarm')

import plotly.express as px

pdf['region'] = pdf['region'].replace({'1': 'West', '2': 'North Central', '3': 'Northeast',  '4': 'South'})

pdf = pdf.sort_values('age')

fig = px.scatter(pdf.query("year==2020"), x="income", y="age",
	         size="ics", color="region", title='ICS Score by Region, Age, and Income for 2023',
                 hover_name="caseid", log_x=True, size_max=20)
fig.show()

grouped_df = pdf.groupby(['year', 'sex']).count().reset_index()

# Create a cluster bar chart using Plotly
figgenyr = go.Figure(data=[
    go.Bar(name='Male', x=grouped_df[grouped_df['sex']=='Male']['year'], y=grouped_df[grouped_df['sex']=='Male']['income']),
   go.Bar(name='Female', x=grouped_df[grouped_df['sex']=='Female']['year'], y=grouped_df[grouped_df['sex']=='Male']['income'])
])

#Update the layout of the chart
figgenyr.update_layout(barmode='group', title='Participants by Gender and Year', xaxis_title='Year', yaxis_title='Participants')

# Show the chart
figgenyr.show()



grouped_df = pdf

grouped_df = grouped_df.groupby(['region','educ']).count().reset_index()

grouped_df['region'] = grouped_df['region'].replace({'1': 'West', '2': 'North Central', '3': 'Northeast',  '4': 'South'})
grouped_df['educ'] = grouped_df['educ'].replace({'': np.nan,'1': 'Grade 0-8 no hs diploma', '2': 'Grade 9-12 no hs diploma', '3': 'Grade 0-12 w/ hs diploma',  '4': 'Grade 13-17 no col degree',  '5': 'Grade 13-16 w/ col degree',  '6': 'Grade 17 w/ col degree'})

grouped_df = grouped_df.dropna(subset=['educ'], how='any')

trace1 = go.Bar(name='West', x=grouped_df[grouped_df['region']=='West']['educ'], y=grouped_df[grouped_df['region']=='West']['caseid'])
trace2 = go.Bar(name='North Central', x=grouped_df[grouped_df['region']=='North Central']['educ'], y=grouped_df[grouped_df['region']=='North Central']['caseid'])
trace3 = go.Bar(name='Northeast', x=grouped_df[grouped_df['region']=='Northeast']['educ'], y=grouped_df[grouped_df['region']=='Northeast']['caseid'])
trace4 = go.Bar(name='South', x=grouped_df[grouped_df['region']=='South']['educ'], y=grouped_df[grouped_df['region']=='South']['caseid'])

data = [trace1, trace2, trace3, trace4]

layout = go.Layout(autosize=True)

# # Create a cluster bar chart using Plotly
figT = go.Figure(data=data, layout=layout)

# #Update the layout of the chart
figT.update_layout(barmode='group', title='Participants by Education and Region', xaxis_title='Education', yaxis_title='Participants')

# Show the chart
figT.show()

pdf.year.unique()

# from dash import Dash, dcc, html, Input, Output
# import plotly.express as px

# app = Dash(__name__)


# app.layout = html.Div([
#     html.H4('Final Project', style={'textAlign':'center'}),
#     dcc.Graph(id="graph"),
#     dcc.Dropdown(pdf.year.unique(), id='dropdown-selection', value='2023', clearable=False)
# ])


# @app.callback(
#     Output("graph", "figure"), 
#     Input("'dropdown-selection", "value"))

# def update_graph(value):
#     dff = pdf_avg_yr[pdf_avg_yr.year==value]
#     return px.line(dff, x='year', y='income')

# if __name__ == '__main__':
#     app.run_server(debug=True)